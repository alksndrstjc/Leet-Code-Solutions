package ArraysAndHashing;

import org.junit.jupiter.api.Test;

import static ArraysAndHashing.ValidSudoku.isValidSudoku;
import static org.junit.jupiter.api.Assertions.*;

class ValidSudokuTest {

    @Test
    public void testValidSudoku() {
        char[][] validSudoku = {
                {'5','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}
        };
        assertTrue(isValidSudoku(validSudoku));
    }

    @Test
    public void testInvalidSudoku() {
        char[][] invalidSudoku = {
                {'5','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','7'} // Duplicate 7 in the last column
        };
        assertFalse(isValidSudoku(invalidSudoku));
    }

    @Test
    public void testLeetCode() {
        char[][] validSudoku = {
                {'.','.','.',     '.','.','.',     '5','.','.'},
                {'.','.','.',     '.','.','.',     '.','.','.'},
                {'.','.','.',     '.','.','.',     '.','.','.'},

                {'9','3','.',     '.','2','.',     '4','.','.'},
                {'.','.','7',     '.','.','.',     '3','.','.'},
                {'.','.','.',     '.','.','.',     '.','.','.'},
                // duplicate in box 2,1
                {'.','.','.',     '3','4','.',     '.','.','.'},
                {'.','.','.',     '.','.','3',     '.','.','.'},
                {'.','.','.',     '.','.','5',     '2','.','.'}};
        assertFalse(isValidSudoku(validSudoku));
    }

}